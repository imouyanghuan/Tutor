package com.tutor.model;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/**
 * DAO for table "IMMESSAGE".
 */
public class IMMessageDao extends AbstractDao<IMMessage, String> {

	public static final String TABLENAME = "IMMESSAGE";

	/**
	 * Properties of entity IMMessage.<br/>
	 * Can be used for QueryBuilder and for referencing column names.
	 */
	public static class Properties {

		public final static Property Id = new Property(0, String.class, "id", true, "ID");
		public final static Property SendStatus = new Property(1, Integer.class, "sendStatus", false, "SEND_STATUS");
		public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
		public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
		public final static Property Time = new Property(4, String.class, "time", false, "TIME");
		public final static Property FromSubJid = new Property(5, String.class, "fromSubJid", false, "FROM_SUB_JID");
		public final static Property ToJid = new Property(6, String.class, "toJid", false, "TO_JID");
		public final static Property ReadStatus = new Property(7, Integer.class, "readStatus", false, "READ_STATUS");
		public final static Property NoticeTime = new Property(8, String.class, "noticeTime", false, "NOTICE_TIME");
		public final static Property NoticeSum = new Property(9, Integer.class, "noticeSum", false, "NOTICE_SUM");
		public final static Property NoticeType = new Property(10, Integer.class, "noticeType", false, "NOTICE_TYPE");
		public final static Property MsgType = new Property(11, Integer.class, "msgType", false, "MSG_TYPE");
	};

	public IMMessageDao(DaoConfig config) {
		super(config);
	}

	public IMMessageDao(DaoConfig config, DaoSession daoSession) {
		super(config, daoSession);
	}

	/** Creates the underlying database table. */
	public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
		String constraint = ifNotExists ? "IF NOT EXISTS " : "";
		db.execSQL("CREATE TABLE " + constraint + "\"IMMESSAGE\" (" + //
				"\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
				"\"SEND_STATUS\" INTEGER," + // 1: sendStatus
				"\"TITLE\" TEXT," + // 2: title
				"\"CONTENT\" TEXT NOT NULL ," + // 3: content
				"\"TIME\" TEXT," + // 4: time
				"\"FROM_SUB_JID\" TEXT NOT NULL ," + // 5: fromSubJid
				"\"TO_JID\" TEXT NOT NULL ," + // 6: toJid
				"\"READ_STATUS\" INTEGER," + // 7: readStatus
				"\"NOTICE_TIME\" TEXT," + // 8: noticeTime
				"\"NOTICE_SUM\" INTEGER," + // 9: noticeSum
				"\"NOTICE_TYPE\" INTEGER," + // 10: noticeType
				"\"MSG_TYPE\" INTEGER);"); // 11: msgType
	}

	/** Drops the underlying database table. */
	public static void dropTable(SQLiteDatabase db, boolean ifExists) {
		String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMMESSAGE\"";
		db.execSQL(sql);
	}

	/** @inheritdoc */
	@Override
	protected void bindValues(SQLiteStatement stmt, IMMessage entity) {
		stmt.clearBindings();
		stmt.bindString(1, entity.getId());
		Integer sendStatus = entity.getSendStatus();
		if (sendStatus != null) {
			stmt.bindLong(2, sendStatus);
		}
		String title = entity.getTitle();
		if (title != null) {
			stmt.bindString(3, title);
		}
		stmt.bindString(4, entity.getContent());
		String time = entity.getTime();
		if (time != null) {
			stmt.bindString(5, time);
		}
		stmt.bindString(6, entity.getFromSubJid());
		stmt.bindString(7, entity.getToJid());
		Integer readStatus = entity.getReadStatus();
		if (readStatus != null) {
			stmt.bindLong(8, readStatus);
		}
		String noticeTime = entity.getNoticeTime();
		if (noticeTime != null) {
			stmt.bindString(9, noticeTime);
		}
		Integer noticeSum = entity.getNoticeSum();
		if (noticeSum != null) {
			stmt.bindLong(10, noticeSum);
		}
		Integer noticeType = entity.getNoticeType();
		if (noticeType != null) {
			stmt.bindLong(11, noticeType);
		}
		Integer msgType = entity.getMsgType();
		if (msgType != null) {
			stmt.bindLong(12, msgType);
		}
	}

	/** @inheritdoc */
	@Override
	public String readKey(Cursor cursor, int offset) {
		return cursor.getString(offset + 0);
	}

	/** @inheritdoc */
	@Override
	public IMMessage readEntity(Cursor cursor, int offset) {
		IMMessage entity = new IMMessage( //
				cursor.getString(offset + 0), // id
				cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // sendStatus
				cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
				cursor.getString(offset + 3), // content
				cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // time
				cursor.getString(offset + 5), // fromSubJid
				cursor.getString(offset + 6), // toJid
				cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // readStatus
				cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // noticeTime
				cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // noticeSum
				cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // noticeType
				cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // msgType
		);
		return entity;
	}

	/** @inheritdoc */
	@Override
	public void readEntity(Cursor cursor, IMMessage entity, int offset) {
		entity.setId(cursor.getString(offset + 0));
		entity.setSendStatus(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
		entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
		entity.setContent(cursor.getString(offset + 3));
		entity.setTime(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
		entity.setFromSubJid(cursor.getString(offset + 5));
		entity.setToJid(cursor.getString(offset + 6));
		entity.setReadStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
		entity.setNoticeTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
		entity.setNoticeSum(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
		entity.setNoticeType(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
		entity.setMsgType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
	}

	/** @inheritdoc */
	@Override
	protected String updateKeyAfterInsert(IMMessage entity, long rowId) {
		return entity.getId();
	}

	/** @inheritdoc */
	@Override
	public String getKey(IMMessage entity) {
		if (entity != null) {
			return entity.getId();
		} else {
			return null;
		}
	}

	/** @inheritdoc */
	@Override
	protected boolean isEntityUpdateable() {
		return true;
	}
}
